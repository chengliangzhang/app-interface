<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="GetProjectCostMapper" >
  <resultMap id="BaseResultMapDto" type="com.maoding.projectcost.dto.ProjectCostDTO" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="project_id" property="projectId" jdbcType="VARCHAR" />
    <result column="operate_company_id" property="operateCompanyId" jdbcType="VARCHAR" />
    <result column="from_company_id" property="fromCompanyId" jdbcType="VARCHAR" />
    <result column="to_company_id" property="toCompanyId" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="BaseResultMapDto2" type="com.maoding.projectcost.dto.ProjectCostPointReceiveOrPayInfoDTO" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="project_id" property="projectId" jdbcType="VARCHAR" />
    <result column="fee_description" property="feeDescription" jdbcType="VARCHAR" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <collection property="paymentDetailList" ofType="com.maoding.projectcost.dto.ProjectCostPaymentDetailDTO">
      <id column="paymentId" property="id" jdbcType="VARCHAR" />
      <result column="paymentFee" property="fee" jdbcType="VARCHAR" />
      <result column="userName" property="userName" jdbcType="VARCHAR" />
      <result column="pay_date" property="payDate" jdbcType="VARCHAR" />
      <result column="paid_date" property="paidDate" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <resultMap id="BaseResultMapDto3" type="com.maoding.projectcost.dto.ProjectCostPointReceiveOrPayInfoDTO" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="project_id" property="projectId" jdbcType="VARCHAR" />
    <result column="fee_description" property="feeDescription" jdbcType="VARCHAR" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <collection property="notPaymentDetailList" ofType="com.maoding.projectcost.dto.ProjectCostPointDetailInfoDTO">
      <id column="point_detail_id" property="id" jdbcType="VARCHAR" />
      <result column="paymentFee" property="fee" jdbcType="VARCHAR" />
      <result column="userName" property="userName" jdbcType="VARCHAR" />
      <result column="detailFee" property="detailFee" jdbcType="DECIMAL" />
      <result column="detailPayFee" property="detailPayFee" jdbcType="DECIMAL" />
      <result column="sumPaidFee" property="sumPaidFee" jdbcType="DECIMAL" />
      <result column="sumPayFee" property="sumPayFee" jdbcType="DECIMAL" />
    </collection>
  </resultMap>

  <sql id="Base_Column_List" >
    id, project_id, operate_company_id, from_company_id,to_company_id, type, fee,  remark, status,create_date,
    create_by, update_date, update_by
  </sql>

  <select id="selectByParam" parameterType="java.util.Map" resultMap="BaseResultMapDto">
    SELECT
    <include refid="Base_Column_List" />
    from maoding_web_project_cost
    where status= '0'
    and project_id=#{projectId,jdbcType=VARCHAR}
    <if test="type!=null">
      and type = #{type,jdbcType=VARCHAR}
    </if>
    <if test="fromCompanyId != null" >
      and from_company_id = #{fromCompanyId,jdbcType=VARCHAR}
    </if>
    <if test="toCompanyId != null" >
      and to_company_id = #{toCompanyId,jdbcType=VARCHAR}
    </if>
    <if test="costId != null" >
      and id = #{costId,jdbcType=VARCHAR}
    </if>
    <if test="flag != null" >
      and flag = #{flag,jdbcType=VARCHAR}
    </if>
    order by create_date desc;
  </select>

  <select id="getCostPointData" resultType="com.maoding.projectcost.dto.ProjectCostPointDataForMyTaskDTO" parameterType="java.util.Map">
    SELECT b.id,b.fee_description,b.fee_proportion,b.fee,b.type,c.id as point_detail_id,c.fee as point_detail_fee,
    if(f.nick_name is null or f.nick_name='',e.company_name,f.nick_name) as company_name,
    <if test = "paymentDetailId!=null">
      ,d.fee as payment_fee
    </if>
    from maoding_web_project_cost a
    LEFT JOIN maoding_web_project_cost_point b on a.id = b.cost_id
    LEFT JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id
    <if test = "paymentDetailId!=null">
      LEFT JOIN maoding_web_project_cost_payment_detail d on c.id = d.point_detail_id
    </if>
    LEFT JOIN maoding_web_company e on (a.from_company_id = e.id or a.to_company_id = e.id) and e.id!= #{companyId,jdbcType=VARCHAR}
    LEFT JOIN maoding_web_business_partner f on f.company_id = e.id
    where 1=1
    <if test = "pointDetailId!=null">
      AND c.id = #{pointDetailId,jdbcType=VARCHAR}
    </if>
    <if test = "paymentDetailId!=null">
      AND d.id = #{paymentDetailId,jdbcType=VARCHAR}
    </if>
  </select>

  <select id="getProjectAmountFee" resultType="com.maoding.projectcost.dto.ProjectAmountFee" parameterType="java.util.Map">
    SELECT
    ifnull(sum(if(to_company_id = #{companyId},c.fee,0)),0) as sumIncome,
    ifnull(sum(if(from_company_id = #{companyId},c.fee,0)),0) as sumPay,
    ifnull(sum(if(to_company_id = #{companyId},d.paid_fee,0)),0) as totalIncome,
    ifnull(sum(if(from_company_id = #{companyId},d.pay_fee,0)),0) as totalPay
    from maoding_web_project_cost a
    INNER JOIN maoding_web_project_cost_point b on a.id = b.cost_id and b.`status`= 0
    INNER JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id and c.`status` = 0
    LEFT  JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
      from maoding_web_project_cost_payment_detail f where `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    where a.project_id= #{projectId} and a.`status`=0
  </select>

  <select id="getProjectAmountFeeByCostId" resultType="com.maoding.projectcost.dto.ProjectCooperatorCostDTO" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    sum(ifnull(if(c.fee_status != 2,c.fee,0),0)) as detailFee,
    sum(ifnull(if(c.fee_status != 2 and c.paid_fee_status = 1,c.fee,0),0)) as detailPaidFee,
    sum(ifnull(if(c.fee_status = 1,c.fee,0),0)) as detailPayFee,
    sum(ifnull(d.paid_fee,0)) as sumPaidFee,
    sum(ifnull(d.pay_fee,0)) as sumPayFee
    from maoding_web_project_cost_point b
    INNER JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id and c.`status` = 0
    LEFT  JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
    from maoding_web_project_cost_payment_detail f where project_id = #{projectId} and `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    where b.cost_id= #{costId} and b.`status`=0
    <if test="pointId!=null">
      and b.id = #{pointId}
    </if>
    and (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
  </select>

  <select id="listProjectAmountFeeByCostId" resultType="com.maoding.projectcost.dto.ProjectCostPointInfoDTO" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    b.id,
    b.fee_description,
    b.fee_proportion,
    b.fee,
    count(DISTINCT c.id) as pointDetailCount,
    sum(ifnull(if(c.fee_status != 2,c.fee,0),0)) as detailFee,
    sum(ifnull(if(c.fee_status != 2 and c.paid_fee_status = 1,c.fee,0),0)) as detailPaidFee,
    sum(ifnull(if(c.fee_status = 1,c.fee,0),0)) as detailPayFee,
    sum(ifnull(d.paid_fee,0)) as sumPaidFee,
    sum(ifnull(d.pay_fee,0)) as sumPayFee
    from maoding_web_project_cost_point b
    LEFT JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id and c.`status` = 0 and  (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
    LEFT JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
    from maoding_web_project_cost_payment_detail f where project_id = #{projectId} and `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    where b.cost_id= #{costId}
    and b.`status`=0
    <if test="pointId!=null">
      and b.id = #{pointId}
    </if>
    <if test="pointDetailId!=null">
      and c.id = #{pointDetailId}
    </if>
    group by b.id
    order by b.create_date
  </select>

  <select id="listProjectCostPointNotReceiveOrPayInfo" resultMap="BaseResultMapDto3" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    b.id,
    b.fee_description,
    b.fee_proportion,
    b.fee,
    c.id as point_detail_id,
    f.user_name as userName,
    count(DISTINCT c.id) as pointDetailCount,
    sum(ifnull(if(c.fee_status != 2,c.fee,0),0)) as detailFee,
    sum(ifnull(if(c.fee_status != 2 and c.paid_fee_status = 1,c.fee,0),0)) as detailPaidFee,
    sum(ifnull(if(c.fee_status = 1,c.fee,0),0)) as detailPayFee,
    sum(ifnull(d.paid_fee,0)) as sumPaidFee,
    sum(ifnull(d.pay_fee,0)) as sumPayFee
    from maoding_web_project_cost_point b
    INNER JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id and c.`status` = 0 and  (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
    LEFT JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
    from maoding_web_project_cost_payment_detail f where project_id = #{projectId} and `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    left join maoding_web_project_cost_operater e on e.cost_detail_id = c.id and e.type = 1
    left join maoding_web_company_user f on e.company_user_id = f.id
    where b.cost_id= #{costId}
    and b.`status`=0
    <if test="pointId!=null">
      and b.id = #{pointId}
    </if>
    order by b.create_date
  </select>


  <select id="listProjectAmountFeeByPointId" resultType="com.maoding.projectcost.dto.ProjectCostPointDetailInfoDTO" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    c.id,
    c.fee,
    c.fee_status as feeStatus,
    c.point_detail_description as pointDetailDescription,
    c.invoice,
    DATE_FORMAT(c.create_date,'%Y-%m-%d')  as pointDetailDate,
    f.user_name as userName,
    sum(ifnull(if(c.fee_status != 2,c.fee,0),0)) as detailFee,
    sum(ifnull(if(c.fee_status != 2 and c.paid_fee_status = 1,c.fee,0),0)) as detailPaidFee,
    sum(ifnull(if(c.fee_status = 1,c.fee,0),0)) as detailPayFee,
    sum(ifnull(d.paid_fee,0)) as sumPaidFee,
    sum(ifnull(d.pay_fee,0)) as sumPayFee
    FROM maoding_web_project_cost_point_detail c
    LEFT JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
    from maoding_web_project_cost_payment_detail f where project_id = #{projectId} and `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    left join maoding_web_project_cost_operater e on e.cost_detail_id = c.id and e.type = 1
    left join maoding_web_company_user f on e.company_user_id = f.id
    where 1=1
    <if test="pointId!=null">
      and c.point_id= #{pointId}
    </if>
    <if test="pointDetailId!=null">
      and c.id = #{pointDetailId}
    </if>
    and c.`status` = 0
    and (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
    group by c.id
    order by c.create_date
  </select>


  <select id="listProjectPaymentFeeByPointDetailId" resultType="com.maoding.projectcost.dto.ProjectCostPaymentDetailDTO" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    d.id,
    d.fee,
   --  c.point_detail_description as pointDetailDescription,
    d.invoice,
    d.pay_date,
    d.paid_date,
    f.user_name as userName,
    d.fee
    FROM maoding_web_project_cost_point_detail c
    INNER JOIN  maoding_web_project_cost_payment_detail d on c.id = d.point_detail_id
    <if test="payType!=null and payType==1">
      left join maoding_web_project_cost_operater e on e.cost_detail_id = d.id and e.type = 5
      left join maoding_web_company_user f on e.company_user_id = f.id
    </if>
    <if test="payType!=null and payType==2">
      left join maoding_web_project_cost_operater e on e.cost_detail_id = d.id and e.type = 6
      left join maoding_web_company_user f on e.company_user_id = f.id
    </if>
    where c.fee_status !=2
    <if test="pointId!=null">
      and c.point_id= #{pointId}
    </if>
    <if test="pointDetailId!=null">
      and c.id = #{pointDetailId}
    </if>
    and c.`status` = 0
    and d.`status` = 0
    and (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
    order by c.create_date
  </select>

  <select id="listProjectCostPointReceiveOrPayInfo" resultMap="BaseResultMapDto2" parameterType="com.maoding.projectcost.dto.ProjectCostQueryDTO">
    SELECT
    b.id,
    b.fee_description,
    b.fee,
    d.pay_date,
    d.paid_date,
    f.user_name as userName,
    d.id as paymentId,
    d.fee as paymentFee
    from maoding_web_project_cost_point b
    INNER JOIN  maoding_web_project_cost_point_detail c on b.id = c.point_id
    INNER JOIN  maoding_web_project_cost_payment_detail d on c.id = d.point_detail_id
    <if test="payType!=null and payType==1">
      left join maoding_web_project_cost_operater e on e.cost_detail_id = d.id and e.type = 5
      left join maoding_web_company_user f on e.company_user_id = f.id
    </if>
    <if test="payType!=null and payType==2">
      left join maoding_web_project_cost_operater e on e.cost_detail_id = d.id and e.type = 6
      left join maoding_web_company_user f on e.company_user_id = f.id
    </if>
    where b.cost_id = #{costId}
    <if test="pointId!=null">
      and c.point_id= #{pointId}
    </if>
    <if test="pointDetailId!=null">
      and c.id = #{pointDetailId}
    </if>
    and b.`status` = 0
    and c.`status` = 0
    and d.`status` = 0
    and (c.company_id = #{companyId} or c.relation_company_id = #{companyId})
    order by c.create_date
  </select>

  <select id="getProjectTechAmountFee" resultType="com.maoding.projectcost.dto.ProjectCooperatorCostDTO" parameterType="java.util.Map">
    SELECT a.id as costId, if(a.to_company_id = #{companyId},1,2) as feeType,
     sum(ifnull(d.pay_fee,0)) as sumPayFee,sum(ifnull(d.paid_fee,0)) as sumPaidFee,
    ifnull(a.fee,0) as planFee,
    sum(ifnull(c.fee,0)) as detailFee,
    ( select  if(b1.nick_name is null or b1.nick_name='',a1.company_name,b1.nick_name)
      from maoding_web_company a1 LEFT JOIN maoding_web_business_partner b1 on a1.id = b1.company_id and b1.type=3
      where a1.id = if(a.to_company_id = #{companyId},a.from_company_id,a.to_company_id) limit 1
      ) as companyName,e.task_name as taskName
    from maoding_web_project_cost a
    LEFT JOIN maoding_web_project_cost_point b on a.id = b.cost_id and b.`status`= 0
    LEFT JOIN maoding_web_project_cost_point_detail c on b.id = c.point_id and c.`status` = 0
    LEFT JOIN (SELECT sum(if(pay_date is not null,fee,0)) as pay_fee, sum(if(paid_date is not null,fee,0))as paid_fee,point_detail_id
      from maoding_web_project_cost_payment_detail f where `status` = 0 GROUP BY point_detail_id) d on c.id = d.point_detail_id
    LEFT JOIN (select r.from_company_id,r.to_company_id,group_concat(t.task_name separator '、' ) as task_name from maoding_web_project_task_relation r
                INNER  JOIN  maoding_web_project_task t ON r.task_id = t.id and r.relation_status = 0 and t.task_status !=1
                where t.project_id =  #{projectId} and (r.from_company_id = #{companyId} or r.to_company_id = #{companyId})
                GROUP BY r.from_company_id,r.to_company_id
     ) e on a.from_company_id = e.from_company_id and a.to_company_id = e.to_company_id
    where a.project_id = #{projectId}
    and a.type = 3
    and (a.from_company_id = #{companyId} or a.to_company_id = #{companyId})
    GROUP BY a.id
  </select>
</mapper>